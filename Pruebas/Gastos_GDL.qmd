---
title: "Gastos"
author: "Luis Márquez"
format:
  html:
    embed-resources: true
    theme:
      light: minty
      dark: darkly
toc: true
df-print: paged
---

```{r}
#| warning: false
library(tidyverse)
library(fpp3)
library(plotly)
library(readxl)
library(tsibble)
library(tibble)
library(zoo)
library(lubridate)
```

```{r}
datos <- read_excel("Gasto.xlsx", sheet = 2)
```

```{r}
datos$Date <- as.Date(datos$Date)
```

```{r}
datos <- as_tsibble(datos, index = Date)
datos

d <- datos |> 
  autoplot(Expense)
ggplotly(d, dynamicTicks = TRUE)
```

# Estimación de modelos

```{r}
datos_fit <- datos |> 
  model(
    media = MEAN(Expense),
    naive = NAIVE(Expense),
    snaive = SNAIVE(Expense),
    drift = RW(Expense ~ drift())
  )
datos_fit
```
# Análisis de residuos

```{r}
datos_fit |> 
  augment()

datos_fit |> 
  augment() |> 
  features(.innov, ljung_box, lag = 10, dof = 0)
```

## Media

```{r}
#| warning: false
datos_fit |> 
  select(media) |> 
  gg_tsresiduals()
```

## Naive

```{r}
#| warning: false
datos_fit |> 
  select(naive) |> 
  gg_tsresiduals()
```

## Seasonal Naive

```{r}
#| warning: false
datos_fit |> 
  select(snaive) |> 
  gg_tsresiduals()
```

## Drift

```{r}
#| warning: false
datos_fit |> 
  select(drift) |> 
  gg_tsresiduals()
```

# Forecast

```{r}
#| warning: false

datos_fc <- datos_fit |> 
  forecast(h = "14 days")

datos_fc

datos_fc |> 
  autoplot(datos) + 
  facet_wrap(~.model) + 
  theme(legend.position = "bottom")

```

Los mejores son media y snaive

```{r}
datos_fc |> 
  filter(.model == "media") |> 
  autoplot()


m <- datos_fc |> 
  filter(.model == 'media')
m <- as_tibble(m)
m <- as_tsibble(m, index = Date)
km <- m |> 
  select(c(Date, .mean)) |> 
  autoplot(.mean) + ggtitle("Predicción media") + ylab("Gasto $") + xlab("Fecha")
ggplotly(km, dynamicTicks = TRUE)
```

```{r}
datos_fc |> 
  filter(.model == "snaive") |> 
  autoplot()


sn <- datos_fc |> 
  filter(.model == 'snaive')
sn <- as_tibble(sn)
sn <- as_tsibble(sn, index = Date)
ksn <- sn |> 
  select(c(Date, .mean)) |> 
  autoplot(.mean) + ggtitle("Predicción seasonal naive") + ylab("Gasto $") + xlab("Fecha")
ggplotly(ksn, dynamicTicks = TRUE)
```

# Análisis Mejorado

```{r}
datos
```

## Visualización

```{r}
datos |> 
  autoplot(Expense) + xlab("Fecha") + ggtitle("Gastos diarios")
```

## Train/Test

```{r}
datos_train <- datos |> 
  filter_index(.~"2024-02-13")
datos_train
```

### Visualización

```{r}
datos_train |> 
  autoplot(Expense) + xlab("Fecha") + ggtitle("Gastos diarios")
```

### Transformación

```{r}
lambda <- datos_train |> 
  features(Expense, features = guerrero) |> 
  pull(lambda_guerrero)
lambda

datos_train |> 
  autoplot(box_cox(Expense, lambda))
```

```{r}
datos_train |> 
  features(Expense, feat_stl)
```

### STL Descomposición

```{r}
datos_train |> 
  model(
    stl = STL(Expense, robust = TRUE)
  ) |> components() |> 
  autoplot()

datos_train |> 
  model(
    stl2 = STL(box_cox(Expense, lambda), robust = TRUE)
  ) |> components() |> 
  autoplot()
```

### Estimación de modelos

```{r}
datos_fit2 <- datos_train |> 
  model(
    mean = MEAN(Expense),
    mean_bc = MEAN(box_cox(Expense, lambda)),
    
    snaive = SNAIVE(Expense),
    snaive_bc = SNAIVE(box_cox(Expense, lambda)),
    
    combi = decomposition_model(
      STL(Expense, robust = TRUE),
      SNAIVE(season_week),
      RW(season_adjust ~ drift())
    ),
    combi_bc = decomposition_model(
      STL(box_cox(Expense, lambda), robust = TRUE),
      SNAIVE(season_week),
      RW(season_adjust ~ drift())
    )
    
  )
datos_fit2
```

### Análisis de los residuos

```{r}
#| warning: false
datos_fit2 |> 
  select(mean) |> 
  gg_tsresiduals()

datos_fit2 |> 
  select(mean_bc) |> 
  gg_tsresiduals()

datos_fit2 |> 
  select(snaive) |> 
  gg_tsresiduals()

datos_fit2 |> 
  select(snaive_bc) |> 
  gg_tsresiduals()

datos_fit2 |> 
  select(combi) |> 
  gg_tsresiduals()

datos_fit2 |> 
  select(combi_bc) |> 
  gg_tsresiduals()

datos_fit2 |> 
  augment() |> 
  features(.innov, ljung_box, dof = 0, lag = 14)
```

### Análisis de error $E$

```{r}
accuracy(datos_fit2) |> 
  arrange(RMSE)
```

## Forecast

```{r}
datos_fc2 <- datos_fit2 |> 
  forecast(h = "14 days")

datos_fc2

datos_fc2 |> 
  autoplot(datos, level = NULL) + xlab("Fecha") + ggtitle("Comparación de predicción")
```

```{r}
datos2 <- datos_fc2
datos2 <- subset(datos2, .model != "combi_bc")
datos2 <- subset(datos2, .model != "snaive_bc")


mod <- datos_fit2
mod <- subset(mod, select = -snaive_bc)
mod <- subset(mod, select = -combi_bc)

datos2 <- mod |> 
  forecast(h = "14 days")

datos2

datos2 |> 
  autoplot(datos, level = NULL) + xlab("Fecha") + ggtitle("Comparación de predicción")

```

